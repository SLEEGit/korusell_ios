//
//  WorkView.swift
//  iosApp
//
//  Created by Sergey Lee on 2022/01/20.
//

import SwiftUI
import FirebaseAuth

struct WorkView: View {
    var body: some View {
        NavigationView {
            WorkList()
                .navigationBarTitle("–†–∞–±–æ—Ç–∞")
        }
    }
}

struct OneWorkView: View {
    let adv: Adv
    //    @State var width: CGFloat = 0
    
    var body: some View {
        HStack(alignment: .top) {
            UrlImageView(urlString: adv.uid  + "ADV" + "0", directory: "advImages")
                .scaledToFit()
                .frame(width: 120, height: 100)
            VStack(alignment: .leading) {
                Text(Util().formatDate(date: adv.createdAt))
                    .padding(.leading, 4).padding(.trailing, 4).padding(.bottom, 3).padding(.top, 2)
                    .font(.caption)
                    .foregroundColor(Color.gray)
                Text(adv.name)
                    .lineLimit(2)
                    .font(.headline)
                    .padding(.leading, 4).padding(.trailing, 4).padding(.bottom, 2)
                Text(adv.city)
                    .foregroundColor(Color.gray)
                    .lineLimit(5)
                    .font(.caption)
                    .padding(.leading, 4).padding(.trailing, 4).padding(.bottom, 2)
                Text(adv.price)
                    .font(.title3)
                Spacer()
                
            }.frame(height: 100, alignment: .leading)
        }.frame(alignment: .top)
            .onAppear {
            }
    }
}

struct WorkList: View {
    @State var categoryName: String = "üõ†"
    @State var city: String = "all"
    @State var isLoading: Bool = true
    @State var subcategory: String = "all"
    @StateObject var advManager = AdvManager()
    
    var body: some View {
        ZStack {
            List {
                ForEach(self.advManager.workAdvs, id: \.id) { adv in
                    NavigationLink(destination: AdvDetailsView(adv: adv)) {
                        OneWorkView(adv: adv)
                    }
                }
            }.disabled(isLoading)
                .toolbar {
                    ToolbarItemGroup(placement: .navigationBarLeading) {
                        Menu {
                            Group {                   
                                Button("üõ† –í—Å—è –†–∞–±–æ—Ç–∞") {
                                    self.categoryName = "üõ†"
                                    self.advManager.subcategory = "all"
                                    self.advManager.getAdvs()
                                }
                                Button("üè≠ –ó–∞–≤–æ–¥") {
                                    self.categoryName = "üè≠ "
                                    self.advManager.subcategory = "factory"
                                    self.advManager.getAdvs()
                                }
                                Button("üë∑üèª‚Äç‚ôÄÔ∏è –°—Ç—Ä–æ–π–∫–∞") {
                                    self.categoryName = "üë∑üèª‚Äç‚ôÄÔ∏è"
                                    self.advManager.subcategory = "construction"
                                    self.advManager.getAdvs()
                                }
                                Button("üè© –ú–æ—Ç–µ–ª—å") {
                                    self.categoryName = "üè©"
                                    self.advManager.subcategory = "motel"
                                    self.advManager.getAdvs()
                                }
                                Button("üçΩ –û–±—â–µ–ø–∏—Ç") {
                                    self.categoryName = "üçΩ"
                                    self.advManager.subcategory = "cafe"
                                    self.advManager.getAdvs()
                                }
                                Button("üì¶ –ü–æ—á—Ç–∞/–î–æ—Å—Ç–∞–≤–∫–∞") {
                                    self.categoryName = "üì¶"
                                    self.advManager.subcategory = "delivery"
                                    self.advManager.getAdvs()
                                }
                                Button("üßëüèΩ‚Äçüåæ –°–µ–ª—å—Ö–æ–∑ —Ä–∞–±–æ—Ç—ã") {
                                    self.categoryName = "üßëüèΩ‚Äçüåæ"
                                    self.advManager.subcategory = "farm"
                                    self.advManager.getAdvs()
                                }
                                Button("üíº –†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–∏—Å–µ") {
                                    self.categoryName = "üíº"
                                    self.advManager.subcategory = "office"
                                    self.advManager.getAdvs()
                                }
                                Button("üë®‚ÄçüöÄ –î—Ä—É–≥–∞—è —Ä–∞–±–æ—Ç–∞") {
                                    self.categoryName = "üë®‚ÄçüöÄ"
                                    self.advManager.subcategory = "otherwork"
                                    self.advManager.getAdvs()
                                }
                            }
                        } label: {
                            Text(self.categoryName)
                                .font(.system(size: 25))
                        }
                        
                    }
                    ToolbarItemGroup(placement: .navigationBarTrailing) {
                        
                        Menu {
                            Button("–í—Å–µ –≥–æ—Ä–æ–¥–∞") {
                                globalCity = "–í—Å–µ –≥–æ—Ä–æ–¥–∞"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                            Button("–ê–Ω—Å–∞–Ω") {
                                globalCity = "–ê–Ω—Å–∞–Ω"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                            Button("–•–≤–∞—Å–æ–Ω–≥") {
                                globalCity = "–•–≤–∞—Å–æ–Ω–≥"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                            Button("–ò–Ω—á—Ö–æ–Ω") {
                                globalCity = "–ò–Ω—á—Ö–æ–Ω"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                            Button("–°–µ—É–ª") {
                                globalCity = "–°–µ—É–ª"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                            Button("–°—É–≤–æ–Ω") {
                                globalCity = "–°—É–≤–æ–Ω"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                            Button("–ê—Å–∞–Ω") {
                                globalCity = "–ê—Å–∞–Ω"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                            Button("–ß—Ö–æ–Ω–∞–Ω") {
                                globalCity = "–ß—Ö–æ–Ω–∞–Ω"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                            Button("–ß—Ö–æ–Ω–¥–∂—É") {
                                globalCity = "–ß—Ö–æ–Ω–¥–∂—É"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                            Button("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥") {
                                globalCity = "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"
                                self.advManager.city = globalCity
                                self.advManager.getAdvs()
                            }
                        } label: {
                            HStack {
                                Text(globalCity)
                                    .font(.system(size: 15))
                            }
                        }
                    }
                }
                .onAppear {
                    self.city = globalCity
                    advManager.subcategory = subcategory
                    advManager.city = globalCity
                    self.advManager.getAdvs()
                    self.isLoading = false
                }
            if isLoading {
                ProgressView().progressViewStyle(CircularProgressViewStyle(tint: Color("textColor")))
                    .background(Color(UIColor.systemGroupedBackground).opacity(0.1))
            }
        }
    }
}

