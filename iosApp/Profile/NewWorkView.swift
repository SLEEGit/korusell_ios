//
//  NewWorkView.swift
//  iosApp
//
//  Created by Sergey Lee on 2022/01/25.
//

import SwiftUI

struct NewWorkView: View {
    @Binding var uid: String
    @Binding var name: String
    @Binding var city: String
    @Binding var price: String
    @Binding var phone: String
    @Binding var description: String
    @Binding var category: String
    @Binding var updatedAt: String
    @Binding var isActive: String
    @Binding var subcategory: String
    
    
    @State var directory: String = "advImages"
    @State private var image = UIImage(named: "blank")!
    @State private var isShowPhotoLibrary = false
    @State private var showingAlert = false
    @State private var showingAlertDelete = false
    @State private var showingHint = false
    @State private var showingHint2 = false
    @State private var businessWarning = false
    @Binding var photos: [UIImage]
    @State var images: String = "0"
    @State var checked: Bool = false
    
    @State private var language = false
    @State private var sex: String = "male"
    @State private var f1 = false
    @State private var h2 = false
    @State private var f4 = false
    @State private var other = false
    
    @Environment(\.presentationMode) var presentationMode: Binding<PresentationMode>
    
    
    var body: some View {
        Form {
            Group {
                HStack {
                    Text("–ó–∞–≥–æ–ª–æ–≤–æ–∫")
                        .foregroundColor(.gray)
                    TextField("–ù–∞–∑–≤–∞–Ω–∏–µ", text: $name)
                        .disableAutocorrection(true)
                }
                Picker("üõ† –í–∏–¥—ã —Ä–∞–±–æ—Ç", selection: $subcategory) {
                    Group {
                        Text("üè≠ –ó–∞–≤–æ–¥").tag("factory")
                        Text("üë∑üèª‚Äç‚ôÄÔ∏è –°—Ç—Ä–æ–π–∫–∞").tag("construction")
                        Text("üè© –ú–æ—Ç–µ–ª—å").tag("motel")
                        Text("üçΩ –û–±—â–µ–ø–∏—Ç").tag("cafe")
                        Text("üßëüèΩ‚Äçüåæ –°–µ–ª—å—Ö–æ–∑ —Ä–∞–±–æ—Ç—ã").tag("farm")
                        Text("üì¶ –ü–æ—á—Ç–∞/–î–æ—Å—Ç–∞–≤–∫–∞").tag("delivery")
                        Text("üíº –†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–∏—Å–µ").tag("office")
                        Text("üë®‚ÄçüöÄ –î—Ä—É–≥–∞—è —Ä–∞–±–æ—Ç–∞").tag("otherwork")
                    }.foregroundColor(Color("textColor"))
                }
                .foregroundColor(.gray)
                HStack {
                    Picker("–ì–æ—Ä–æ–¥", selection: $city) {
                        Group {
                            Text("–ê–Ω—Å–∞–Ω").tag("–ê–Ω—Å–∞–Ω")
                            Text("–•–≤–∞—Å–æ–Ω–≥").tag("–•–≤–∞—Å–æ–Ω–≥")
                            Text("–°–µ—É–ª").tag("–°–µ—É–ª")
                            Text("–°—É–≤–æ–Ω").tag("–°—É–≤–æ–Ω")
                            Text("–ò–Ω—á—Ö–æ–Ω").tag("–ò–Ω—á—Ö–æ–Ω")
                            Text("–ê—Å–∞–Ω").tag("–ê—Å–∞–Ω")
                            Text("–ß—Ö–æ–Ω–∞–Ω").tag("–ß—Ö–æ–Ω–∞–Ω")
                            Text("–ß—Ö–æ–Ω–¥–∂—É").tag("–ß—Ö–æ–Ω–¥–∂—É")
                        }
                        .foregroundColor(Color("textColor"))
                    }.foregroundColor(.gray)
                    Image(systemName: "info.circle.fill")
                        .renderingMode(.original)
                        .shadow(radius: 2)
                        .onTapGesture {
                            showingHint2 = true
                        }.alert(isPresented: $showingHint2) {
                            Alert (
                                title: Text("ü§î –ï—Å–ª–∏ –í–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –Ω–∏–∂–µ"),
                                dismissButton: .default(Text("Ok"))
                            )
                        }
                }
                HStack {
                    Text("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
                        .foregroundColor(.gray)
                    TextField("", text: $city)
                        .disableAutocorrection(true)
                    
                }
                HStack {
                    Text("üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞")
                        .foregroundColor(.gray)
                    TextField("", text: $price)
                        .disableAutocorrection(true)
                }
                HStack {
                    Text("‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                        .foregroundColor(.gray)
                    TextField("010-0000-0000", text: $phone)
                }
                HStack {
                    Text("üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π —è–∑—ã–∫")
                        .foregroundColor(.gray)
                    Toggle("", isOn: $language)
                }
                Picker("–ü–æ–ª", selection: $sex) {
                    Group {
                        Text("üë±üèº‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω–∞").tag("male")
                        Text("üë©üèª –ñ–µ–Ω—â–∏–Ω–∞").tag("female")
                    }.foregroundColor(Color("textColor"))
                }.pickerStyle(SegmentedPickerStyle())
                    .foregroundColor(.gray)
                HStack {
                    Toggle("H2", isOn: $h2)
                        .toggleStyle(CheckboxToggleStyle(style: .circle))
                    Toggle("H4", isOn: $f4)
                        .toggleStyle(CheckboxToggleStyle(style: .circle))
                    Toggle("F1", isOn: $f1)
                        .toggleStyle(CheckboxToggleStyle(style: .circle))
                    Toggle("–î—Ä—É–≥–∞—è", isOn: $other)
                        .toggleStyle(CheckboxToggleStyle(style: .circle))
                }
                VStack {
                    HStack {
                        Text("–û–ø–∏—Å–∞–Ω–∏–µ:")
                    }
                    .foregroundColor(.gray)
                    TextEditor(text: $description)
                        .frame(height: 100)
                }
            }
            Section {
                HStack {
                    Spacer()
                    Button("–°–æ–∑–¥–∞—Ç—å") {
                        self.images = String(photos.count)
                        AdvManager().postAdv(adv: Adv(id: uid + Util().dateForAdv(date: Util().dateByTimeZone()), uid: uid + Util().dateForAdv(date: Util().dateByTimeZone()), name: name, category: "work", city: city, price: price, phone: phone, description: description, createdAt: Util().dateByTimeZone(), images: images, updatedAt: Util().dateByTimeZone(), isActive: "1", subcategory: subcategory)) {}
                        showingAlert = true
                    }
                    Spacer()
                }.alert(isPresented: $showingAlert) {
                    Alert(
                        title: Text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"),
                        dismissButton: .destructive((Text("–û–∫")), action: {
                            presentationMode.wrappedValue.dismiss()
                        })
                    )
                }
            }
        }
        .onAppear {
        }
    }
}





