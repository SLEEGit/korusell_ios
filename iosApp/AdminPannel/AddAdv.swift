//
//  AddAdv.swift
//  iosApp
//
//  Created by Sergey Lee on 2022/01/10.
//

import SwiftUI

struct AddAdvView: View {
    //    @State var service: Service!
    @State var uid: String = ""
    @State var name: String = ""
    @State var city: String = ""
    @State var price: String = ""
    @State var phone: String = ""
    @State var description: String = ""
    @State var createdAt: String = ""
    @State var category: String = ""
    
    
    @State var directory: String = "advImages"
    @State private var image = UIImage(named: "blank")!
    @State private var isShowPhotoLibrary = false
    @State private var showingAlert = false
    @State private var showingAlertDelete = false
    @State private var showingHint = false
    @State private var showingHint2 = false
    @State private var businessWarning = false
    @State private var photos: [UIImage] = []
    @State var images: String = "0"

    @Environment(\.presentationMode) var presentationMode: Binding<PresentationMode>
    
    
    var body: some View {
        Form {
            Section {
            if !self.photos.isEmpty {
                TabView {
                    ForEach(self.photos, id: \.self) { photo in
                        Image(uiImage: photo)
                            .resizable()
                            .scaledToFit()
                            .frame(height: 300)
                            .cornerRadius(10)
                            .contextMenu {
                                Button(action: {
                                    self.photos = self.photos.filter { $0 != photo }
                                }) {
                                    Text("–£–¥–∞–ª–∏—Ç—å")
                                    Image(systemName: "trash")
                                }
                            }
                        
                    }
                }.frame(height: 300)
                    .indexViewStyle(.page(backgroundDisplayMode: .always))
                    .tabViewStyle(.page)
            }
                HStack {
                    Spacer()
                    Button("–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è") {
                        isShowPhotoLibrary.toggle()
                    }
                    .sheet(isPresented: $isShowPhotoLibrary) {
                        PhotoPicker(photos: $photos, showPicker: self.$isShowPhotoLibrary, directory: "advImages", uid: uid)
                    }
                    Spacer()
                }
            
            }
            HStack {
                
                Text("UID")
                    .foregroundColor(.gray)
                TextField("UID", text: $uid)
                    .disableAutocorrection(true)
            }
            HStack {
                
                Text("–ù–∞–∑–≤–∞–Ω–∏–µ")
                    .foregroundColor(.gray)
                TextField("–ù–∞–∑–≤–∞–Ω–∏–µ", text: $name)
                    .disableAutocorrection(true)
            }
            Picker("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", selection: $category) {
                Group {
                    Text("–†–∞–±–æ—Ç–∞").tag("work")
                    Text("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç").tag("transport")
                    Text("–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å").tag("house")
                    Text("–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã").tag("phone")
                    Text("–î–ª—è –¥–æ–º–∞, —Ö–æ–±–±–∏").tag("hobby")
                    Text("–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã").tag("workshop")
                    Text("–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞").tag("electronic")
                    Text("–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã").tag("children")
                    Text("–û–¥–µ–∂–¥–∞").tag("clothes")
                    Text("–°–ø–æ—Ä—Ç, —Ç—É—Ä–∏–∑–º –∏ –æ—Ç–¥—ã—Ö").tag("sport")
                }
                .foregroundColor(Color("textColor"))
                Group {
                    Text("–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ").tag("pet")
                    Text("–û–±–º–µ–Ω, –æ—Ç–¥–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ").tag("change")
                }.foregroundColor(Color("textColor"))
            }.foregroundColor(.gray)
            HStack {
                Picker("–ì–æ—Ä–æ–¥", selection: $city) {
                    Group {
                        Text("–ê–Ω—Å–∞–Ω").tag("–ê–Ω—Å–∞–Ω")
                        Text("–•–≤–∞—Å–æ–Ω–≥").tag("–•–≤–∞—Å–æ–Ω–≥")
                        Text("–°–µ—É–ª").tag("–°–µ—É–ª")
                        Text("–ò–Ω—á—Ö–æ–Ω").tag("–ò–Ω—á—Ö–æ–Ω")
                        Text("–°—É–≤–æ–Ω").tag("–°—É–≤–æ–Ω")
                        Text("–ê—Å–∞–Ω").tag("–ê—Å–∞–Ω")
                        Text("–ß—Ö–æ–Ω–∞–Ω").tag("–ß—Ö–æ–Ω–∞–Ω")
                    }
                    .foregroundColor(Color("textColor"))
                }.foregroundColor(.gray)
                Image(systemName: "info.circle.fill")
                    .renderingMode(.original)
                    .shadow(radius: 2)
                    .onTapGesture {
                        showingHint2 = true
                    }.alert(isPresented: $showingHint2) {
                        Alert (
                            title: Text("ü§î –ï—Å–ª–∏ –í–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –Ω–∏–∂–µ"),
                            dismissButton: .default(Text("Ok"))
                        )
                    }
            }
            Group {
            HStack {
                Text("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
                    .foregroundColor(.gray)
                TextField("", text: $city)
                    .disableAutocorrection(true)
                
            }
            HStack {
                Text("–¶–µ–Ω–∞/–ó–∞—Ä–ø–ª–∞—Ç–∞")
                    .foregroundColor(.gray)
                TextField("", text: $price)
                    .disableAutocorrection(true)
                    
            }
            HStack {
                Text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                    .foregroundColor(.gray)
                TextField("010-0000-0000", text: $phone)
                
                
            }
            VStack {
                HStack {
                    Text("–û–ø–∏—Å–∞–Ω–∏–µ:")
                }
                .foregroundColor(.gray)
                TextEditor(text: $description)
                    .frame(height: 100)
            }
            }
            Section {
                HStack {
                    Spacer()
                    Button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ") {
                        self.images = String(photos.count)
                        DB().updateAdv(uid: uid, name: name, category: category, city: city, price: price, phone: phone, descrition: description, createdAt: Util().dateByTimeZone(), images: images) {
                            var n = 0
                            for photo1 in photos {
                                DB().postImage(image: photo1, directory: directory, uid: uid + "ADV" + String(n), quality: 0.1)
                                n += 1
                            }
                            for i in photos.count...4 {
                                print(i)
                                print("iii")
                                DB().deleteImage(uid: uid + "ADV" + String(i), directory: directory)
                            }
                            showingAlert = true
                        }
                    }
                    Spacer()
                }.alert(isPresented: $showingAlert) {
                    Alert(
                        title: Text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"),
                        dismissButton: .destructive((Text("–û–∫")), action: {
                            presentationMode.wrappedValue.dismiss()
                        })
                    )
                }
                
            }
            
                Section {
                    HStack {
                        Spacer()
                        Button(action: {
                            showingAlertDelete = true
                        }) {
                            Text("–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
                                .foregroundColor(Color.red)
                        }.disabled(
                            self.name == "" &&
                            self.category == "" &&
                            self.city == "" &&
                            self.price == "" &&
                            self.phone == "" &&
                            self.description == "" &&
                            self.createdAt == ""
                        ).alert(isPresented: $showingAlertDelete) {
                            Alert(
                                title: Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?"),
                                primaryButton: .destructive(Text("–£–¥–∞–ª–∏—Ç—å"), action: {
                                    DB().deleteAdv(uid: uid) {
                                        self.name = ""
                                        self.category = ""
                                        self.city = ""
                                        self.price = ""
                                        self.phone = ""
                                        self.description = ""
                                        self.createdAt = ""
                                        presentationMode.wrappedValue.dismiss()
                                    }
                                    
                                    
                                }),
                                secondaryButton: .cancel(Text("–û—Ç–º–µ–Ω–∞"))
                            )
                        }
                        Spacer()
                    
                }
                
            }
        }.alert(isPresented: $businessWarning) {
            Alert(
                title: Text("–°–æ–∑–¥–∞–≤–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π"),
                dismissButton: .default(Text("–û–∫"))
            )
        }
        
        .navigationTitle("–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        .onAppear {
            
            businessWarning = true
            if Pref.userDefault.bool(forKey: "adv") {
                businessWarning = false
            }
            Pref.userDefault.set(true, forKey: "adv")
            Pref.userDefault.synchronize()
            
            DB().getMultiImages(uid: uid + "ADV", directory: directory) { images in
                self.photos = images
            }
        }
    }
}

