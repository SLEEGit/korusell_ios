//
//  RegistrationView.swift
//  iosApp
//
//  Created by Sergey Lee on 2021/12/15.
//

import SwiftUI

struct RegistrationView: View {
    @State var email: String = ""
    @State var password: String = ""
    @State var rePassword: String = ""
    
    @State var phonenumber: String = ""
    @State var code: String = ""
    @State var ID: String = ""
    
    @State var showingAlertSuccess: Bool = false
    @Environment(\.presentationMode) var presentationMode: Binding<PresentationMode>
    
    @State var showWarning: Bool = false
    @State var warningText: String = ""
    @State var isEmailValid: Bool = false
    @State var isPassValid: Bool = false
    @State var showingHint: Bool = false
    @State var phoneVerifyungSuccess: Bool = false
    
    
    @ObservedObject var logging = Logging()
    var body: some View {
        Form {
            Section(header: Text("–í–≤–µ–¥–∏—Ç–µ –í–∞—à e-mail –∏ –ø–∞—Ä–æ–ª—å"), footer: Text(warningText).foregroundColor(Color.red).lineLimit(0).minimumScaleFactor(0.1)) {
                HStack {
                TextField("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞", text: $email, onEditingChanged: { (isChanged) in
                    if !isChanged {
                        if Util().textFieldValidatorEmail(self.email) {
                            self.isEmailValid = true
                        } else {
                            warningText = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª. –ø–æ—á—Ç—ã!"
                            self.isEmailValid = false
                            self.email = ""
                        }
                    }
                })
                    .disableAutocorrection(true)
                    .keyboardType(.emailAddress)
                    .textContentType(.emailAddress)
                    .autocapitalization(.none)
                Image(systemName: "info.circle.fill")
                    .renderingMode(.original)
                    .shadow(radius: 2)
                    .onTapGesture {
                        showingHint = true
                    }.alert(isPresented: $showingHint) {
                        Alert(
                            title: Text("ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π e-mail"),
                            dismissButton: .default(Text("–û–∫"))
                        )
                        
                    }
                }
                SecureField("–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)", text: $password)
                SecureField("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å", text: $rePassword)
            }
                Section(header: Text("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")) {
                    HStack {
                        Text("+82 10")
                        TextField("0000-0000", text: $phonenumber)
                    }
                    
                    Button(action: {
                        Authentication().phoneValidation(code: "8210", number: phonenumber) { ID in
                            self.ID = ID
                        }
                    }, label: {Text("–ü–æ–ª—É—á–∏—Ç—å SMS —Å –∫–æ–¥–æ–º")})
                
            }
            Section {
                TextField("–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ SMS", text: $code)
                Button(action: {
                    Authentication().phoneAuth(ID: self.ID, code: self.code) {
                        phoneVerifyungSuccess = true
                    }
                }, label: {Text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥")})
            }
            Section {
                Button(action: {
                    if password != rePassword {
                        warningText = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!"
                    } else if password.count < 8 {
                        warningText = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤!"
                    } else {
                        warningText = ""
                        Authentication().signUp(email: email, password: password, phone: "010\(phonenumber)") {
                            warningText = Pref.registerCompletion
                            if warningText == "success" {
                                showingAlertSuccess = true
                            }
                            
                        }
                    }
                    
                }, label: {
                    Text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                })
                .alert(isPresented: $showingAlertSuccess) {
                    Alert(
                        title: Text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"),
                        dismissButton: .destructive(Text("–û–∫"), action: {
                            presentationMode.wrappedValue.dismiss()
                        })
                    )
            }
                
                
                .disabled(email.isEmpty || password.isEmpty || rePassword.isEmpty || !phoneVerifyungSuccess)
                
            }
        }.navigationBarTitle("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    }
}

struct RegistrationView_Previews: PreviewProvider {
    static var previews: some View {
        RegistrationView()
    }
}
